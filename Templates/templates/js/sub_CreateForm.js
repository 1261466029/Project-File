//Re packaging based on checkform.js(function(){    //必须引入CheckForm.js    $.fn.extend({        createForm:function( json ){            var form = function(){                    return new form.ii.init();                },								is_object = function( object ){										return typeof object == 'object' && object != null;									},                foreach = function( target , callback , boolean ){                    var length = 0,						createCount = {														count : 0													},						changeCount = function( num ){														var number = num - 0;														return ( createCount.count = isNaN( number ) ? createCount.count : createCount.count + number );													};					if( !is_object( target ) )						return target;					length = target.length;					if( length )						for( ; target[ createCount.count ] != null ; createCount.count ++ ){							if( callback( createCount.count , target[ createCount.count ] , changeCount ) === false )								return createCount.count;						}					else if( boolean == true )						for( createCount.count in target ){							if( !target.hasOwnProperty( createCount.count ) )								continue;							if( callback( createCount.count , target[ createCount.count ] , changeCount ) === false )								return createCount.count;						}					else						for( createCount.count in target ){							if( callback( createCount.count , target[ createCount.count ] , changeCount ) === false )								return createCount.count;						}                },                headleJSON = function() {                    try {                        self.arguments = JSON.parse(json);                    } catch( error ){                        self.arguments = json;                    }                    if (typeof self.arguments != 'object' || self.arguments == null)                        throw new Error(" Arguments isnot a JSON ");                },                headleArguments = function(){                    var index,url,type,list;                    index = self.arguments.form_index;                    url = self.arguments.form_url;                    type = self.arguments.send_type ? self.arguments.send_type : 'GET';                    list = typeof self.arguments.sub_form_list == 'object' && self.arguments.sub_form_list != null ? self.arguments.sub_form_list : '';                    if( !index || !url || !list )                        throw new Error(" Lack of necessary attributes ");                    self.index = index;                    self.id = 'CreateForm_' + index;                    self.url = url;                    self.list = list;                    self.type = type;                },                create = function( context ){                    self.form = $( formDom( self.url , self.type , self._default.form_index , self.index , self.DomList ) );                    self.form.on( 'submit' , self.submit );                    $( context ).append( self.form );                },                headleDomList = function(){                    self.DomList = '';                    foreach( self.list , function( key , value ){                        self.DomList += createFormUnit( value );                    });                },                createFormUnit = function( unit ){                    if( self._default.form_unit[ unit.nodeName ] )                        return self._default.form_unit[ unit.nodeName ]( unit.name , unit );                    return '';                },                formDom = function( url , type , name , index , list ){                    return "<form id='" + self.id + "' class='form_block' action='" + url + "' method='" + type + "' ><input type='hidden' name='" + name + "' value='" + index + "'/>" + list + "</form>";                },                callback = function(){                    var target = $( this ),                        index = target.data( 'index' ),                        type = {};                    type[ index ] = self.reg[ index ];                    $().checkForm( '#' + self.id ).check({                        type : type,                        success : function( value , name ){                            ChangeCallback.call( this , true );                        },                        fail : function( name ){                            ChangeCallback.call( this );                        }                    })                },                bindCallback = function( status ){                    var target = $( this ),                        index = target.data( 'index' );                    ChangeCallback.call( this , status );                    if( bindList[ index ] )                        return;                    bindList[ index ] = 1;                    if( target.attr( 'type' ) == 'text' || target.prop( 'nodeName' ) == 'TEXTAREA' )                        target.bind( 'input' , function(){                            callback.call( this );                        } );                    target.bind( 'change' , function(){                        callback.call( this );                    } )                },                ChangeCallback = function( status ){                    var target = $( this ),                        form_block = $( target.parents( '.form_block') ),                        will_show_txt = '.fail_input',                        will_hide_txt = '.success_input',                        remove_txt = 'success',                        add_txt = 'fail',                        will_show_block,                        will_hide_block;                    if( status ){                        if( self.callback.success && self.callback.success.call( this , target.val() , target.attr('name') ) )                            return;                        will_show_txt = '.success_input';                        will_hide_txt = '.fail_input';                        remove_txt = 'fail';                        add_txt = 'success';                    }                    else                    if( self.callback.fail && self.callback.fail.call( this , target.attr('name')  ) )                        return;                    will_show_block = $( form_block.children( will_show_txt ) );                    will_hide_block = $( form_block.children( will_hide_txt ) );                    target.removeClass( remove_txt ).addClass( add_txt );                    will_show_block.show() ;                    will_hide_block.hide();                },                bindList = {},                self;            form.ii = form.prototype = {                constructor : form,                init : function(){                    self = this;                    self.reg = {};                    self._default = {                        form_index : 'form_index',                        form_unit : (function(){                            var i = function(){                                var _this = this;                                this.base = function( name , type , placeholder , value , reg , selected ){                                    type = type || 'text';                                    var dataIndex = '',                                        attrName = '';                                    if( name )                                        attrName = "name='" + name + "'";                                    if( reg )                                        dataIndex = "data-index='" + name + "'";                                    return '<input placeholder="' + ( placeholder ? placeholder : '' ) + '" value=\'' + ( value ? value : '' ) + '\' type="' + type + '" ' + dataIndex + ' ' + attrName + ' ' + ( selected ? 'checked = "checked"' : '' ) + '/>';                                };                                this.createSpan = function( value ){                                    return '<span class="form_block form_describe">' + value + '</span>';                                };                                this.input = function( name , options ){                                    var type = options.type ,                                        placeholder = options.placeholder ,                                        value = options.value ,                                        reg = options.reg,                                        failTxt = options.failTxt || '',                                        successTxt = options.successTxt || '';                                    if( reg && name )                                        self.reg[ name ] = reg;                                    return '<div class="form_block form_input_block"><label>' + _this.base( name , type , placeholder , value , reg ) + '</label><p class="fail_input" style="display:none" >' + failTxt + '</p><p class="success_input" style="display:none" >' + successTxt + '</p></div>'                                };                                this.select = function( name , options ){                                    var html = '',                                        reg = options.reg,                                        failTxt = options.failTxt || '',                                        successTxt = options.successTxt || '',                                        options = options.options,                                        left01 = '<option value="',                                        left02 = '" ',                                        left03 = ' >',                                        right = '</option>',                                        dataIndex = '',                                        attrName = '';                                    if( name ){                                        if( reg ){                                            dataIndex = "data-index='" + name + "'";                                            self.reg[ name ] = reg;                                        }                                        attrName = "name='" + name + "'";                                    }                                    foreach( options , function( key , value ){                                        html += ( left01 + value[ 'index' ] + left02 + ( value[ 'selected' ] ? 'selected="selected"' : '' ) + left03 + value[ 'value' ] + right );                                    } );                                    return '<div class="form_block form_select_block"><label><select ' + dataIndex + ' ' + attrName + '>' + html + '</select></label><p class="fail_input" style="display:none" >' + failTxt + '</p><p class="success_input" style="display:none" >' + successTxt + '</p></div>';                                };                                this.radio = function( name , options ){                                    var html = '',                                        reg = options.reg,                                        failTxt = options.failTxt || '',                                        successTxt = options.successTxt || '',                                        options = options.options;                                    if( reg && name )                                        self.reg[ name ] = reg;                                    foreach( options , function( key , value ){                                        html += ( '<label>' + _this.base( name , 'radio' , undefined , value.value , reg , value.selected ) + _this.createSpan( value.value ) + '</label>' );                                    } );                                    return '<div class="form_block form_radio_block"><div>' + html + '</div><p class="fail_input" style="display:none" >' + failTxt + '</p><p class="success_input" style="display:none" >' + successTxt + '</p></div>';                                };                                this.checkbox = function( name , options ){                                    var html = '',                                        reg = options.reg,                                        failTxt = options.failTxt || '',                                        successTxt = options.successTxt || '',                                        options = options.options;                                    if( reg && name )                                        self.reg[ name ] = reg;                                    foreach( options , function( key , value ){                                        html += ( '<label>' + _this.base( name , 'checkbox' , undefined , value.value , reg , value.selected ) + _this.createSpan( value.value ) + '</label>' );                                    } );                                    return '<div class="form_block form_checkbox_block"><div>' + html + '</div><p class="fail_input" style="display:none" >' + failTxt + '</p><p class="success_input" style="display:none" >' + successTxt + '</p></div>';                                };                                this.file = function( name , options ){                                    var html = '',                                        type = options.type ,                                        placeholder = options.placeholder ,                                        value = options.value ,                                        reg = options.reg,                                        failTxt = options.failTxt || '',                                        successTxt = options.successTxt || '',                                        dataIndex = '',                                        attrName = '';                                    if( name ){                                        if( reg ){                                            dataIndex = "data-index='" + name + "'";                                            self.reg[ name ] = reg;                                        }                                        attrName = "name='" + name + "'";                                    }                                    html = '<input style="display:none;" type="file" ' + dataIndex + ' ' + attrName + '/>' + _this.createSpan( value );                                    return '<div class="form_block form_file_block"><label>' + html + '</label><p class="fail_input" style="display:none" >' + failTxt + '</p><p class="success_input" style="display:none" >' + successTxt + '</p></div>';                                };                                this.textarea = function( name , options ){                                    var html = '',                                        placeholder = options.placeholder,                                        value = options.value,                                        reg = options.reg,                                        failTxt = options.failTxt || '',                                        successTxt = options.successTxt || '',                                        dataIndex = '',                                        attrName = '';                                    if( name ){                                        if( reg ){                                            dataIndex = "data-index='" + name + "'";                                            self.reg[ name ] = reg;                                        }                                        attrName = "name='" + name + "'";                                    }                                    html = '<textarea ' + attrName + ' ' + dataIndex + ' placeholder="' + placeholder + '">' + value + '</textarea><p class="fail_input" style="display:none" >' + failTxt + '</p><p class="success_input" style="display:none" >' + successTxt + '</p>';                                    return '<div class="form_block form_textarea_block">' + html + '</div>';                                };                            };                            return new i();                        })()                    };                    headleJSON();                    headleArguments();                    headleDomList();                    self.submit = function(){                        var count = 0;                        $().checkForm( '#' + self.id ).check({                            type : self.reg,                            success : function( value , name ){                                bindCallback.call( this , true );                            },                            fail : function( name ){                                count ++;								bindCallback.call( this );                            }                        });                        if( count )                            return false;                    };                    self.callback = {};                } ,                create : function( context ){                    create( context ? $( context ) : $( 'body' ) );                } ,                headleReturnCallback : function( json ){                    json = typeof json == 'object' && json != null ? json : {};                    self.callback = self.callback || {};										console.log( json );                    if( typeof json.success == 'function' )                        self.callback.success = json.success;                    if( typeof json.fail == 'function' )                        self.callback.fail = json.fail;                }            };            form.ii.init.prototype = form.ii;            return form();        }    });/*//以下是实例    var i = $().createForm({        //form 的索引        form_index:'lilalala',        //form 的地址        form_url:'./test.php',        //form 中的 Dom 单位        sub_form_list:{            //nodeName:dom类型,            //value:描述（就是字面意思）,            //type:节点的type属性值,            //reg:需要匹配的方式,            //index            //failTxt:匹配不成功文本,            //successTxt:匹配成功文本,            //options:（对select，checkbox的复数单位）添加选项            //placeholder:默认值,            0:{nodeName:'input',value:'SUBMIT',type:'submit'},            1:{name:'select',nodeName:'select',failTxt:'fail01',options:{0:{value:'lalala'},1:{selected:'true',checked:true,value:'hahaha'}},reg:'testEmpty'},            2:{name:'kjgiuhrtg',nodeName:'checkbox',failTxt:'fail02',options:{0:{value:'lalala'},1:{selected:'true',checked:true,value:'hahaha'}},reg:'testEmpty'},            3:{name:'op[op[',nodeName:'radio',failTxt:'fail03',options:{0:{value:'lalala'},1:{selected:'true',checked:true,value:JSON.stringify({0:'hahaha'})}},reg:'testEmpty'},            4:{name:'trkoiyhtjio',nodeName:'file',failTxt:'fail04',value:'SetFile',type:'button',reg:'testEmpty'},            5:{name:'pppppppppp',nodeName:'textarea',failTxt:'fail05',value:'lalala',placeholder:'placeholder...',reg:'testEmpty'},            6:{name:'input',nodeName:'input',failTxt:'fail06',value:JSON.stringify({0:'hahaha'}),placeholder:'placeholder...',reg:'testEmpty'}        }    });//生成form    i.create();//自定义回调函数    i.headleReturnCallback({        success : function( value , name ){            console.log( 'success : ' , this , value , name );        },        fail : function( name ){            console.log( 'fail : ' , this , name );        }    });*/})();